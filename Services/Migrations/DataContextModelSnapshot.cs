// <auto-generated />
using System;
using Common.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Services.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.7");

            modelBuilder.Entity("Common.Entities.Achievements.Achievement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Identifier")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Achievements");
                });

            modelBuilder.Entity("Common.Entities.Configuration.ApplicationConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ApplicationName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Balance")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageText")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginImageUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("MemorableDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("AppConfig");
                });

            modelBuilder.Entity("Common.Entities.Habits.Habit", b =>
                {
                    b.Property<Guid>("Reference")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("Reference");

                    b.ToTable("Habits");
                });

            modelBuilder.Entity("Common.Entities.Investments.UserInvestments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Share")
                        .HasColumnType("TEXT");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserReference")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("UserInvestments");
                });

            modelBuilder.Entity("Common.Entities.Logs.Log", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Area")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstSeen")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastSeen")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Occurances")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Severity")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("Common.Entities.Pledges.Pledge", b =>
                {
                    b.Property<Guid>("Reference")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Reference");

                    b.ToTable("Pledges");
                });

            modelBuilder.Entity("Common.Entities.Unlockables.Unlockable", b =>
                {
                    b.Property<Guid>("Reference")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Display")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Reference");

                    b.ToTable("Unlockables");
                });

            modelBuilder.Entity("Common.Entities.Users.User", b =>
                {
                    b.Property<Guid>("UserReference")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("AuthenticationToken")
                        .HasColumnType("TEXT");

                    b.Property<string>("AvatarUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Balance")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FontFamily")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("HasActiveSession")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ParticleEffect")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SecondName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Theme")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("UserReference");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Common.Entities.Users.UserAchievements", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AchievementReference")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TimesUnlocked")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("UserReference")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("UserAchievements");
                });

            modelBuilder.Entity("Common.Entities.Users.UserHabits", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("HabitReference")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastCompleted")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserReference")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("UserHabits");
                });

            modelBuilder.Entity("Common.Entities.Users.UserHistoricalStocks", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Profit")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Shares")
                        .HasColumnType("TEXT");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Time")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserReference")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("UserHistoricalStocks");
                });

            modelBuilder.Entity("Common.Entities.Users.UserPledges", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AdditionalInformation")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("AssigneeAccepted")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("AssigneeCompleted")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("AssigneeReference")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AssignerReference")
                        .HasColumnType("TEXT");

                    b.Property<bool>("AssignerSignedOff")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("PledgeReference")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("UserPledges");
                });

            modelBuilder.Entity("Common.Entities.Users.UserStats", b =>
                {
                    b.Property<Guid>("UserReference")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("GiftsGiven")
                        .HasColumnType("INTEGER");

                    b.Property<int>("HabitsCompleted")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PledgesCompleted")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("TradeProfit")
                        .HasColumnType("TEXT");

                    b.Property<int>("TradesMade")
                        .HasColumnType("INTEGER");

                    b.HasKey("UserReference");

                    b.ToTable("UserStats");
                });

            modelBuilder.Entity("Common.Entities.Users.UserTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Added")
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserReference")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("UserTransactions");
                });

            modelBuilder.Entity("Common.Entities.Users.UserUnlockables", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("UnlockableReference")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserReference")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("UserUnlockables");
                });
#pragma warning restore 612, 618
        }
    }
}
